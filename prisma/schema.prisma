generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidatos {
  id                  String    @id @default(uuid()) @map("id_candidato")
  dtCadastro          DateTime  @default(now()) @map("dt_cadastro")
  nome                String
  email               String
  fone1               String
  fone2               String?
  cpf                 String?
  dtNascimento        DateTime? @map("dt_nascimento")
  escolaridade        Int?
  cursoAtual          String?   @map("curso_atuao")
  cidade              String
  uf                  String
  alunoCensupeg       Boolean   @default(false) @map("aluno_censupeg")
  outrasInfos         String?   @map("outras_infos")
  dtUltContato        DateTime? @map("dt_ultimo_contato")
  usuarioCad          Usuarios? @relation("usuarioCadCandidato", fields: [idUsuarioCad], references: [id])
  idUsuarioCad        String?   @map("id_usuario_cadastro")
  usuarioUltContato   Usuarios? @relation("usuarioUltContatoCandidato", fields: [idUsuarioUltContato], references: [id])
  idUsuarioUltContato String?   @map("id_usuario_ultimo_contato")

  @@map("candidatos")
}

model Cursos {
  id              Int      @id @default(autoincrement()) @map("id_curso")
  dtCadastro      DateTime @default(now()) @map("dt_cadastro")
  nome            String
  modalidade      Int
  tipo            Int
  valor           Decimal
  duracao         String
  link            String?
  infosAdicionais String?  @map("ifnos_adicionais")

  CursosEmUnidades CursosEmUnidades[]
  @@map("cursos")
}

model CursosEmUnidades {
  curso     Cursos   @relation(fields: [idCurso], references: [id])
  idCurso   Int
  unidade   Unidades @relation(fields: [idUnidade], references: [id])
  idUnidade Int
  dtVinculo DateTime @default(now()) @map("dt_vinculo")


  @@id([idCurso, idUnidade])
}

model Empresas {
  id                  String    @id @default(uuid()) @map("id_empresa")
  nome                String
  razaoSocial         String?   @map("razao_social")
  cnpj                String?
  nomeContato         String    @map("nome_contato")
  emailContato        String?   @map("email_contato")
  foneContato         String?   @map("fone_contato")
  foneContato2        String?   @map("fone_contato_2")
  situacao            Int
  outrasInfos         String?   @map("outras_infos")
  usuarioCad          Usuarios  @relation("usuarioCadEmpresa", fields: [idUsuarioCad], references: [id])
  idUsuarioCad        String    @map("id_usuario_cad")
  dtUltContato        DateTime? @map("dt_ultimo_contato")
  usuarioUltContato   Usuarios? @relation("usuarioUltContatoEmpresa", fields: [idUsuarioUltContato], references: [id])
  idUsuarioUltContato String?   @map("id_usuario_ultimo_contato")

  @@map("empresas")
}

model RefreshKeys {
  id          String   @id @default(uuid())
  dtExpiracao DateTime @map("dt_expiracao")
  tokenAtual  String   @map("token_atual")
  usuario     Usuarios @relation(fields: [idUsuario], references: [id])
  idUsuario   String   @map("id_usuario")
  ipOrigem    String?  @map("ip_origem")
}

model Unidades {
  id               Int                @id @default(autoincrement())
  nome             String             @unique
  cep              String
  logradouro       String
  numero           String
  complemento      String
  bairro           String
  cidade           String
  uf               String
  usuarios         Usuarios[]
  CursosEmUnidades CursosEmUnidades[]
}

model Usuarios {
  id                    String        @id @default(uuid())
  dtCadastro            DateTime      @default(now()) @map("dt_cadastro")
  dtAtualizacao         DateTime      @updatedAt @map("dt_atualizacao")
  nome                  String        @db.VarChar(80)
  cpf                   String?
  telefone              String?
  email                 String        @db.VarChar(120)
  senha                 String        @db.VarChar(80)
  senhaTemp             Boolean       @default(true) @map("senha_temp")
  perfilUsuario         Int           @map("perfil_usuario")
  ativo                 Boolean       @default(true)
  RefreshKeys           RefreshKeys[]
  Unidades              Unidades?     @relation(fields: [unidadesId], references: [id])
  unidadesId            Int?          @map("id_unidade")
  candidatosCadastrados Candidatos[]  @relation("usuarioCadCandidato")
  ultContatoCandidato   Candidatos[]  @relation("usuarioUltContatoCandidato")
  empresasCadastradas   Empresas[]    @relation("usuarioCadEmpresa")
  ultContatoEmpresa     Empresas[]    @relation("usuarioUltContatoEmpresa")
}
