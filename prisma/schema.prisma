generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Agendamentos {
  id            String       @id @default(uuid()) @map("id_agendamento")
  dtAgendamento DateTime     @map("data_agendamento")
  funcionario   Funcionarios @relation(fields: [idFuncionario], references: [id])
  idFuncionario String       @map("id_funcionario")
  descricao     String
  tipoAtividade Int          @map("tipo_atividade")
  candidato     Candidatos?  @relation(fields: [idCandidato], references: [id])
  idCandidato   String?      @map("id_candidato")
  empresa       Empresas?    @relation(fields: [idEmpresa], references: [id])
  idEmpresa     String?      @map("id_empresa")
  concluida     Boolean      @default(false)
  dtConclusao   DateTime?    @map("data_conclusao")
}

model Atividades {
  idAtividade   Int          @id @default(autoincrement())
  funcionario   Funcionarios @relation(fields: [idFuncionario], references: [id])
  idFuncionario String       @map("id_funcionario")
  dtAtividade   DateTime     @map("dt_atividade")
  descricao     String

  @@map("atividades")
}

model Campanhas {
  id           String                  @id @default(uuid()) @map("id_campanha")
  nome         String
  idZappier    String                  @map("id_zappier")
  unidades     CampanhasUnidades[]
  redesSociais CampanhasRedesSociais[]
  Candidatos   Candidatos[]

  @@map("campanhas")
}

model CampanhasRedesSociais {
  Campanhas    Campanhas?    @relation(fields: [idCampanha], references: [id])
  idCampanha   String        @map("id_campanha")
  redesSociais RedesSociais? @relation(fields: [idRede], references: [id])
  idRede       Int           @map("id_rede_social")

  @@id([idCampanha, idRede])
  @@map("campanhas_redes_sociais")
}

model CampanhasUnidades {
  Campanhas  Campanhas? @relation(fields: [idCampanha], references: [id])
  idCampanha String     @map("id_campanha")
  Unidades   Unidades?  @relation(fields: [idUnidade], references: [id])
  idUnidade  Int        @map("id_unidade")

  @@id([idCampanha, idUnidade])
  @@map("campanhas_unidades")
}

model Candidatos {
  id                      String            @id @default(uuid()) @map("id_candidato")
  dtCadastro              DateTime          @default(now()) @map("dt_cadastro")
  nome                    String
  email                   String?
  fone1                   String
  fone2                   String?
  cpf                     String?
  dtNascimento            DateTime?         @map("dt_nascimento")
  escolaridade            Int?
  formacao                String?
  cursoAtual              String?           @map("curso_atuao")
  cidade                  String?
  uf                      String?
  alunoCensupeg           Boolean           @default(false) @map("aluno_censupeg")
  outrosCursosInteresse   String?           @map("outros_cursos_interesse")
  outrasInfos             String?           @map("outras_infos")
  dtUltContato            DateTime?         @map("dt_ultimo_contato")
  sexo                    String?
  horarioMatutino         Boolean           @default(false) @map("horario_matutino")
  horarioVespertino       Boolean           @default(false) @map("horario_vespertino")
  horarioNoturno          Boolean           @default(false) @map("horario_noturno")
  interessePos            Boolean           @default(false) @map("interesse_pos")
  interesseGraduacao      Boolean           @default(false) @map("interesse_graduacao")
  interesseMestrado       Boolean           @default(false) @map("interesse_mestrado")
  interessePresencial     Boolean           @default(false) @map("interesse_presencial")
  interesseEad            Boolean           @default(false) @map("interesse_ead")
  interesseHibrido        Boolean           @default(false) @map("interesse_hibrido")
  funcionarioCad          Funcionarios?     @relation("funcionarioCadCandidato", fields: [idFuncionarioCad], references: [id])
  idFuncionarioCad        String?           @map("id_funcionario_cadastro")
  funcionarioUltContato   Funcionarios?     @relation("funcionarioUltContatoCandidato", fields: [idFuncionarioUltContato], references: [id])
  idFuncionarioUltContato String?           @map("id_funcionario_ultimo_contato")
  cursosInteresse         CursosInteresse[]
  Campanha                Campanhas?        @relation(fields: [idCampanha], references: [id])
  idCampanha              String?           @map("id_campanha")

  ContatoCandidatos ContatoCandidatos[]
  Agendamentos      Agendamentos[]
  @@map("candidatos")
}

model ContatoCandidatos {
  idContato         Int          @id @default(autoincrement())
  candidato         Candidatos   @relation(fields: [idCandidato], references: [id])
  idCandidato       String       @map("id_candidato")
  funcionario       Funcionarios @relation(fields: [idFuncionario], references: [id])
  idFuncionario     String       @map("id_funcionario")
  dtContato         DateTime     @default(now()) @map("dt_contato")
  edital            String?
  proxContato       DateTime?    @map("proximo_contato")
  infosContato      String       @map("infos_contato")
  statusAtendimento Int          @map("status_atendimento")
  comentProxContato String?      @map("comentarios_proximo_contato")

  CursosInteresse CursosInteresse[]
  // @@id([idContato, idCandidato, idFuncionario])
  @@map("contato_candidatos")
}

model ContatoEmpresas {
  idContato         Int          @id @default(autoincrement())
  empresa           Empresas     @relation(fields: [idEmpresa], references: [id])
  idEmpresa         String       @map("id_empresa")
  funcionario       Funcionarios @relation(fields: [idFuncionario], references: [id])
  idFuncionario     String       @map("id_funcionario")
  dtContato         DateTime     @default(now()) @map("dt_contato")
  areasInteresse    String?      @map("areas_interesse")
  proxContato       DateTime?    @map("proximo_contato")
  infosContato      String       @map("infos_contato")
  statusAtendimento Int          @map("status_atendimento")
  comentProxContato String?      @map("comentarios_proximo_contato")

  @@map("contato_empresas")
}

model Cursos {
  id              Int      @id @default(autoincrement()) @map("id_curso")
  dtCadastro      DateTime @default(now()) @map("dt_cadastro")
  nome            String
  modalidade      Int
  tipo            Int
  link            String?
  infosAdicionais String?  @map("ifnos_adicionais")

  CursosEmUnidades CursosEmUnidades[]
  CursosInteresse  CursosInteresse[]
  @@map("cursos")
}

model CursosEmUnidades {
  curso     Cursos   @relation(fields: [idCurso], references: [id])
  idCurso   Int      @map("id_curso")
  unidade   Unidades @relation(fields: [idUnidade], references: [id])
  idUnidade Int      @map("id_unidade")
  dtVinculo DateTime @default(now()) @map("dt_vinculo")

  @@id([idCurso, idUnidade])
  @@map("cursos_unidades")
}

model CursosInteresse {
  curso       Cursos     @relation(fields: [idCurso], references: [id])
  idCurso     Int        @map("id_curso")
  candidato   Candidatos @relation(fields: [idCandidato], references: [id], onDelete: Cascade)
  idCandidato String     @map("id_candidato")
  dtVinculo   DateTime   @default(now()) @map("dt_vinculo")

  ContatoCandidatos  ContatoCandidatos? @relation(fields: [idContatoCandidato], references: [idContato])
  idContatoCandidato Int?
  // contatoCandidatosIdFuncionario String?
  @@id([idCurso, idCandidato])
  @@map("cursos_interesse")
}

model Empresas {
  id                      String            @id @default(uuid()) @map("id_empresa")
  nome                    String
  razaoSocial             String?           @map("razao_social")
  cnpj                    String?
  nomeContato             String            @map("nome_contato")
  emailContato            String?           @map("email_contato")
  foneContato             String?           @map("fone_contato")
  foneContato2            String?           @map("fone_contato_2")
  cpfContato              String?           @map("cpf_contato")
  situacao                Int
  outraSituacao           String?           @map("outra_situacao")
  cep                     String?
  logradouro              String?
  numero                  String?
  complemento             String?
  bairro                  String?
  cidade                  String?
  uf                      String?
  outrasInfos             String?           @map("outras_infos")
  funcionarioCad          Funcionarios      @relation("funcionarioCadEmpresa", fields: [idFuncionarioCad], references: [id])
  idFuncionarioCad        String            @map("id_funcionario_cad")
  funcionarioUltContato   Funcionarios?     @relation("funcionarioUltContatoEmpresa", fields: [idFuncionarioUltContato], references: [id])
  idFuncionarioUltContato String?           @map("id_funcionario_ultimo_contato")
  dtUltContato            DateTime?         @map("dt_ultimo_contato")
  contatos                ContatoEmpresas[]

  Agendamentos Agendamentos[]
  @@map("empresas")
}

model Funcionarios {
  id                    String            @id @default(uuid())
  dtCadastro            DateTime          @default(now()) @map("dt_cadastro")
  dtAtualizacao         DateTime          @updatedAt @map("dt_atualizacao")
  nome                  String            @db.VarChar(80)
  cpf                   String?
  telefone              String?
  email                 String            @db.VarChar(120)
  senha                 String            @db.VarChar(80)
  senhaTemp             Boolean           @default(true) @map("senha_temp")
  perfilFuncionario     Int               @map("perfil_funcionario")
  ativo                 Boolean           @default(true)
  unidades              Unidades?         @relation(fields: [unidadesId], references: [id])
  unidadesId            Int?              @map("id_unidade")
  candidatosCadastrados Candidatos[]      @relation("funcionarioCadCandidato")
  ultContatoCandidato   Candidatos[]      @relation("funcionarioUltContatoCandidato")
  empresasCadastradas   Empresas[]        @relation("funcionarioCadEmpresa")
  ultContatoEmpresa     Empresas[]        @relation("funcionarioUltContatoEmpresa")
  RefreshKeys           RefreshKeys[]     @relation("funcionarioRefreshKey")
  ContatoEmpresas       ContatoEmpresas[]


  ContatoCandidatos ContatoCandidatos[]
  Atividades        Atividades[]
  Agendamentos      Agendamentos[]
  @@map("funcionarios")
}

model RedesSociais {
  id                    Int                     @id @default(autoincrement()) @map("id_rede_social")
  nome                  String
  CampanhasRedesSociais CampanhasRedesSociais[]

  @@map("redes_sociais")
}

model RefreshKeys {
  id            String       @id @default(uuid())
  dtExpiracao   DateTime     @map("dt_expiracao")
  tokenAtual    String       @map("token_atual")
  funcionario   Funcionarios @relation("funcionarioRefreshKey", fields: [idFuncionario], references: [id])
  idFuncionario String       @map("id_funcionario")
  ipOrigem      String?      @map("ip_origem")

  @@map("refresh_keys")
}

model Unidades {
  id               Int                 @id @default(autoincrement())
  nome             String              @unique
  cep              String
  logradouro       String
  numero           String
  complemento      String?
  bairro           String
  cidade           String
  uf               String
  funcionarios     Funcionarios[]
  CursosEmUnidades CursosEmUnidades[]
  campanhas        CampanhasUnidades[]

  @@map("unidades")
}
