generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidatos {
  id                      String        @id @default(uuid()) @map("id_candidato")
  dtCadastro              DateTime      @default(now()) @map("dt_cadastro")
  nome                    String
  email                   String
  fone1                   String
  fone2                   String?
  cpf                     String?
  dtNascimento            DateTime?     @map("dt_nascimento")
  escolaridade            Int?
  formacao                String?
  cursoAtual              String?       @map("curso_atuao")
  cidade                  String
  uf                      String
  alunoCensupeg           Boolean       @default(false) @map("aluno_censupeg")
  outrasInfos             String?       @map("outras_infos")
  dtUltContato            DateTime?     @map("dt_ultimo_contato")
  sexo                    String?
  contatoMatutino         Boolean       @default(false) @map("contato_matutino")
  contatoVespertino       Boolean       @default(false) @map("contato_vespertino")
  contatoNoturno          Boolean       @default(false) @map("contato_noturno")
  interessePos            Boolean       @default(false) @map("interesse_pos")
  interesseGraduacao      Boolean       @default(false) @map("interesse_graduacao")
  interessePresencial     Boolean       @default(false) @map("interesse_presencial")
  interesseEad            Boolean       @default(false) @map("interesse_ead")
  funcionarioCad          Funcionarios? @relation("funcionarioCadCandidato", fields: [idFuncionarioCad], references: [id])
  idFuncionarioCad        String?       @map("id_funcionario_cadastro")
  funcionarioUltContato   Funcionarios? @relation("funcionarioUltContatoCandidato", fields: [idFuncionarioUltContato], references: [id])
  idFuncionarioUltContato String?       @map("id_funcionario_ultimo_contato")

  @@map("candidatos")
}

model Cursos {
  id              Int      @id @default(autoincrement()) @map("id_curso")
  dtCadastro      DateTime @default(now()) @map("dt_cadastro")
  nome            String
  modalidade      Int
  tipo            Int
  valor           Decimal
  duracao         String
  link            String?
  infosAdicionais String?  @map("ifnos_adicionais")

  CursosEmUnidades CursosEmUnidades[]
  @@map("cursos")
}

model CursosEmUnidades {
  curso     Cursos   @relation(fields: [idCurso], references: [id])
  idCurso   Int
  unidade   Unidades @relation(fields: [idUnidade], references: [id])
  idUnidade Int
  dtVinculo DateTime @default(now()) @map("dt_vinculo")


  @@id([idCurso, idUnidade])
  @@map("cursos_unidades")
}

model Empresas {
  id                      String        @id @default(uuid()) @map("id_empresa")
  nome                    String
  razaoSocial             String?       @map("razao_social")
  cnpj                    String?
  nomeContato             String        @map("nome_contato")
  emailContato            String?       @map("email_contato")
  foneContato             String?       @map("fone_contato")
  foneContato2            String?       @map("fone_contato_2")
  situacao                Int
  outraSituacao           String?       @map("outra_situacao")
  cep                     String?
  logradouro              String?
  numero                  String?
  complemento             String?
  bairro                  String?
  cidade                  String?
  uf                      String?
  outrasInfos             String?       @map("outras_infos")
  funcionarioCad          Funcionarios  @relation("funcionarioCadEmpresa", fields: [idFuncionarioCad], references: [id])
  idFuncionarioCad        String        @map("id_funcionario_cad")
  funcionarioUltContato   Funcionarios? @relation("funcionarioUltContatoEmpresa", fields: [idFuncionarioUltContato], references: [id])
  idFuncionarioUltContato String?       @map("id_funcionario_ultimo_contato")
  dtUltContato            DateTime?     @map("dt_ultimo_contato")

  @@map("empresas")
}

model RefreshKeys {
  id            String       @id @default(uuid())
  dtExpiracao   DateTime     @map("dt_expiracao")
  tokenAtual    String       @map("token_atual")
  funcionario   Funcionarios @relation("funcionarioRefreshKey", fields: [idFuncionario], references: [id])
  idFuncionario String       @map("id_funcionario")
  ipOrigem      String?      @map("ip_origem")

  @@map("refresh_keys")
}

model Unidades {
  id               Int                @id @default(autoincrement())
  nome             String             @unique
  cep              String
  logradouro       String
  numero           String
  complemento      String
  bairro           String
  cidade           String
  uf               String
  funcionarios     Funcionarios[]
  CursosEmUnidades CursosEmUnidades[]

  @@map("unidades")
}

model Funcionarios {
  id                    String        @id @default(uuid())
  dtCadastro            DateTime      @default(now()) @map("dt_cadastro")
  dtAtualizacao         DateTime      @updatedAt @map("dt_atualizacao")
  nome                  String        @db.VarChar(80)
  cpf                   String?
  telefone              String?
  email                 String        @db.VarChar(120)
  senha                 String        @db.VarChar(80)
  senhaTemp             Boolean       @default(true) @map("senha_temp")
  perfilFuncionario     Int           @map("perfil_funcionario")
  ativo                 Boolean       @default(true)
  Unidades              Unidades?     @relation(fields: [unidadesId], references: [id])
  unidadesId            Int?          @map("id_unidade")
  candidatosCadastrados Candidatos[]  @relation("funcionarioCadCandidato")
  ultContatoCandidato   Candidatos[]  @relation("funcionarioUltContatoCandidato")
  empresasCadastradas   Empresas[]    @relation("funcionarioCadEmpresa")
  ultContatoEmpresa     Empresas[]    @relation("funcionarioUltContatoEmpresa")
  RefreshKeys           RefreshKeys[] @relation("funcionarioRefreshKey")


  @@map("funcionarios")
}
